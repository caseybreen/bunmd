filter(bmonth != 0) %>%
group_by(bmonth) %>%
tally() %>%
mutate(freq = signif(n*100 / sum(n), 2)) %>%
mutate(label = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")) %>%
select(bmonth, label, n, `freq %` = freq)
censoc.dmf %>%
group_by(dmonth) %>%
tally() %>%
mutate(freq = signif(n*100 / sum(n), 2)) %>%
mutate(label = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")) %>%
select(dmonth, label, n, `freq %` = freq)
censoc.dmf %>%
filter(!is.na(weight)) %>%
summarize(min(weight), max(weight))
rm(list=ls())
## Library Packages
library(tidyverse)
library(data.table)
## read in censoc.dmf data file
censoc.numident <- read_csv("~/Documents/data/censoc_numident_v1.csv")
byear_plot <- censoc.numident %>%
group_by(byear) %>%
summarise(n = n()) %>%
ggplot(aes(x = byear, y = n)) +
geom_line() +
geom_point() +
theme_minimal() + #replace with a different theme (theme_bw()) if the bbplot package isn't downloaded
ggtitle("Year of Birth") +
theme(legend.position="bottom") +
xlab("title") +
theme(plot.title = element_text(size=20),
axis.title = element_text(size = 17),
axis.text.y = element_text(size=17),
axis.text.x = element_text(size=17)) +
labs(x = "Year",
y = "Count") +
scale_y_continuous(labels = scales::comma) +
scale_x_continuous(breaks = scales::pretty_breaks(n=5))
ggsave(byear_plot, filename = "figures/byear_plot_numident.png", width = 10, height = 7)
byear_plot <- censoc.numident %>%
group_by(byear) %>%
summarise(n = n()) %>%
ggplot(aes(x = byear, y = n)) +
geom_line() +
geom_point() +
theme_minimal() + #replace with a different theme (theme_bw()) if the bbplot package isn't downloaded
ggtitle("Year of Birth") +
theme(legend.position="bottom") +
xlab("title") +
theme(plot.title = element_text(size=20),
axis.title = element_text(size = 17),
axis.text.y = element_text(size=17),
axis.text.x = element_text(size=17)) +
labs(x = "Year",
y = "Count") +
scale_y_continuous(labels = scales::comma) +
scale_x_continuous(breaks = scales::pretty_breaks(n=5))
ggsave(byear_plot, filename = "figures/byear_plot_numident.png", width = 10, height = 7)
byear_plot <- censoc.numident %>%
group_by(byear) %>%
summarise(n = n()) %>%
ggplot(aes(x = byear, y = n)) +
geom_line() +
geom_point() +
theme_minimal() + #replace with a different theme (theme_bw()) if the bbplot package isn't downloaded
ggtitle("Year of Birth") +
theme(legend.position="bottom") +
xlab("title") +
theme(plot.title = element_text(size=20),
axis.title = element_text(size = 17),
axis.text.y = element_text(size=17),
axis.text.x = element_text(size=17)) +
labs(x = "Year",
y = "Count") +
scale_y_continuous(labels = scales::comma) +
scale_x_continuous(breaks = scales::pretty_breaks(n=5))
byear_plot
knitr::kable(censoc.numident %>%
#filter(bmonth != 0) %>%
group_by(bmonth) %>%
tally() %>%
mutate(freq = signif(n*100 / sum(n), 2)) %>%
mutate(label = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")) %>%
select(bmonth, label, n, freq))
dyear_plot <- censoc.numident %>%
group_by(dyear) %>%
summarise(n = n()) %>%
ggplot(aes(x = dyear, y = n)) +
geom_line() +
geom_point() +
theme_minimal() + #replace with a different theme (theme_bw()) if the bbplot package isn't downloaded
ggtitle("Year of Death") +
theme(plot.title = element_text(size=20),
axis.title = element_text(size = 17),
axis.text.y = element_text(size=17),
axis.text.x = element_text(size=17)) +
labs(x = "Year",
y = "Count") +
scale_y_continuous(labels = scales::comma, limits = c(0, 500000)) +
scale_x_continuous(breaks = scales::pretty_breaks(n=5))
ggsave(dyear_plot, filename = "figures/dyear_plot_numident.png", width = 10, height = 7)
dyear_plot <- censoc.numident %>%
group_by(dyear) %>%
summarise(n = n()) %>%
ggplot(aes(x = dyear, y = n)) +
geom_line() +
geom_point() +
theme_minimal() + #replace with a different theme (theme_bw()) if the bbplot package isn't downloaded
ggtitle("Year of Death") +
theme(plot.title = element_text(size=20),
axis.title = element_text(size = 17),
axis.text.y = element_text(size=17),
axis.text.x = element_text(size=17)) +
labs(x = "Year",
y = "Count") +
scale_y_continuous(labels = scales::comma, limits = c(0, 500000)) +
scale_x_continuous(breaks = scales::pretty_breaks(n=5))
ggsave(dyear_plot, filename = "figures/dyear_plot_numident.png", width = 10, height = 7)
ggsave(dyear_plot, filename = "figures/dyear_plot_numident.png", width = 10, height = 7)
dyear_plot
censoc.numident %>%
group_by(dmonth) %>%
tally() %>%
mutate(freq = signif(n*100 / sum(n), 2)) %>%
mutate(label = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")) %>%
select(dmonth, label, n, `freq %` = freq)
death_age_plot
death_age_plot <- censoc.numident %>%
group_by(death_age) %>%
summarise(n = n()) %>%
ggplot(aes(x = death_age, y = n)) +
geom_line() +
geom_point() +
theme_minimal() + #replace with a different theme (theme_bw()) if the bbplot package isn't downloaded
ggtitle("Age at Death") +
theme(legend.position="bottom") +
xlab("title") +
theme(plot.title = element_text(size=20),
axis.title = element_text(size = 17),
axis.text.y = element_text(size=17),
axis.text.x = element_text(size=17)) +
labs(x = "Year",
y = "Count") +
scale_y_continuous(labels = scales::comma) +
scale_x_continuous(breaks = scales::pretty_breaks(n=5))
death_age_plot
censoc.numident %>%
group_by(sex) %>%
tally() %>%
mutate(freq = signif(n*100 / sum(n), 3)) %>%
mutate(label = c("Men", "Women",)) %>%
select(sex, label, n, `freq %` = freq)
knitr::kable(censoc.numident %>%
group_by(sex) %>%
tally() %>%
mutate(freq = signif(n*100 / sum(n), 3)) %>%
mutate(label = c("Men", "Women",)) %>%
select(sex, label, n, `freq %` = freq))
knitr::kable(censoc.numident %>%
group_by(sex) %>%
tally() %>%
mutate(freq = signif(n*100 / sum(n), 3)) %>%
mutate(label = c("Men", "Women")) %>%
select(sex, label, n, `freq %` = freq))
knitr::kable(censoc.numident %>%
group_by(race_first) %>%
tally() %>%
mutate(freq = signif(n*100 / sum(n), 3)) %>%
mutate(label = c("White", "Black", "Other", "Asian", "Hispanic", "North American Native", "Missing")) %>%
select(race_first, label, n, freq))
censoc.numident %>%
group_by(race_last) %>%
tally() %>%
mutate(freq = signif(n*100 / sum(n), 3)) %>%
mutate(label = c("White", "Black", "Other", "Asian", "Hispanic", "North American Native", "Missing")) %>%
select(race_last, label, n, `freq %` = freq)
age_first_app_plot <- censoc.numident %>%
group_by(age_first_application) %>%
filter(age_first_application %in% c(0:110)) %>%
summarise(n = n()) %>%
ggplot(aes(x = age_first_application, y = n)) +
geom_point() +
geom_line() +
theme_minimal() + #replace with a different theme (theme_bw()) if the bbplot package isn't downloaded
ggtitle("Age of First Application") +
theme(legend.position="bottom") +
xlab("title") +
theme(plot.title = element_text(size=20),
axis.title = element_text(size = 17),
axis.text.y = element_text(size=17),
axis.text.x = element_text(size=17)) +
labs(x = "Age of First Application",
y = "Count") +
scale_y_continuous(labels = scales::comma) +
scale_x_continuous(breaks = scales::pretty_breaks(n=5))
## Read in qualtrics
qualtrics <- read_csv("../risk_measurement_mturk/scaleup_v3/Risk Measurement pilot_March 27, 2020_22.23.csv")
## Read in mt
mturk <- read_csv("../risk_measurement_mturk/scaleup_v3/Batch_3970777_batch_results.csv") %>%
mutate(Answer.surveycode = as.numeric(Answer.surveycode))
mturk
qualtrics.accept.reject <- qualtrics %>%
mutate(mturkcode = as.numeric(mturkcode)) %>%
filter(!is.na(mturkcode)) %>%
select(mturkcode, Reject = reject) %>%
mutate(Reject = case_when(
Reject == "drop" ~ "Responses appeared to be generated by a bot",
TRUE ~ ""
)) %>%
mutate(Approve = case_when(
Reject == "" ~ "x",
TRUE ~ ""
))
mturk.approve.reject <- mturk %>%
select(-Approve, -Reject) %>%
inner_join(qualtrics.accept.reject, by = c("Answer.surveycode" = "mturkcode"))
write_csv(mturk.approve.reject, "mturk_approval_v2.csv")
write_csv(mturk.approve.reject, "../risk_measurement_mturk/scaleup_v3/mturk_approval_v2.csv")
write_csv(mturk.approve.reject, "../risk_measurement_mturk/scaleup_v3/mturk_approval_v3.csv")
mturk.approve.reject
qualtrics.accept.reject <- qualtrics %>%
mutate(mturkcode = as.numeric(mturkcode)) %>%
filter(!is.na(mturkcode)) %>%
select(mturkcode, Reject = reject) %>%
mutate(Reject = case_when(
Reject == "drop" ~ "Responses appeared to be generated by a bot",
TRUE ~ ""
)) %>%
mutate(Approve = case_when(
Reject == "" ~ "x",
TRUE ~ ""
))
mturk.approve.reject <- mturk %>%
select(-Approve, -Reject) %>%
inner_join(qualtrics.accept.reject, by = c("Answer.surveycode" = "mturkcode"))
write_csv(mturk.approve.reject, "../risk_measurement_mturk/scaleup_v3/mturk_approval_v3.csv")
mturk.approve.reject
qualtrics
## Read in mt
mturk <- read_csv("../risk_measurement_mturk/scaleup_v3/Batch_3970777_batch_results.csv") %>%
mutate(Answer.surveycode = as.numeric(Answer.surveycode))
mturk
mturk.approve.reject
mturk
qualtrics
mturk.approve.reject
mturk.approve.reject %>%
filter(Approve == "") %>%
select(Answer.surveycode)
## double-check rejected cases
mturk.approve.reject %>%
filter(Approve == "") %>%
select(Answer.surveycode)
## Replace "drop" with reject message
## Create Approve column
qualtrics.accept.reject <- qualtrics %>%
mutate(mturkcode = as.numeric(mturkcode)) %>%
filter(!is.na(mturkcode)) %>%
select(mturkcode, Reject = reject) %>%
mutate(Reject = case_when(
Reject == "drop" ~ "Responses appeared to be generated by a bot",
TRUE ~ ""
)) %>%
mutate(Approve = case_when(
Reject == "" ~ "x",
TRUE ~ ""
))
## Read in mturk batch results to put in approve reject. Then match on the qualtrics approve/reject results.
mturk.approve.reject <- mturk %>%
select(-Approve, -Reject) %>%
inner_join(qualtrics.accept.reject, by = c("Answer.surveycode" = "mturkcode"))
write_csv(mturk.approve.reject, "../risk_measurement_mturk/scaleup_v3/mturk_approval_v3.csv")
## double-check rejected cases
mturk.approve.reject %>%
filter(Approve == "") %>%
select(Answer.surveycode)
mturk.approve.reject
## Replace "drop" with reject message
## Create Approve column
qualtrics.accept.reject <- qualtrics %>%
mutate(mturkcode = as.numeric(mturkcode)) %>%
filter(!is.na(mturkcode)) %>%
select(mturkcode, Reject = reject) %>%
mutate(Reject = case_when(
Reject == "drop" ~ "Responses appeared to be generated by a bot",
TRUE ~ ""
)) %>%
mutate(Approve = case_when(
Reject == "" ~ "x",
TRUE ~ ""
))
## Read in mturk batch results to put in approve reject. Then match on the qualtrics approve/reject results.
mturk.approve.reject <- mturk %>%
select(-Approve, -Reject) %>%
inner_join(qualtrics.accept.reject, by = c("Answer.surveycode" = "mturkcode"))
write_csv(mturk.approve.reject, "../risk_measurement_mturk/scaleup_v3/mturk_approval_v3.csv")
## double-check rejected cases
mturk.approve.reject %>%
filter(Approve == "") %>%
select(Answer.surveycode)
mturk.approve.reject
## double-check rejected cases
mturk.approve.reject %>%
filter(Approve == "") %>%
select(Answer.surveycode)
mturk.approve.reject
mturk.approve.reject %>% filter(Answer.surveycode %in% qualtrics.accept.reject$Answer.surveycode)
mturk.approve.reject %>% filter(Answer.surveycode %in% qualtrics.accept.reject$mturkcode)
mturk.approve.reject %>% filter(!Answer.surveycode %in% qualtrics.accept.reject$mturkcode)
qualtrics.accept.reject %>% filter(!mtrukcode %in% Answer.surveycode)
qualtrics.accept.reject %>% filter(!mturkcode %in% Answer.surveycode)
qualtrics.accept.reject %>% filter(!mturkcode %in% mturk.approve.reject$Answer.surveycode)
mturk
11811
mturk <- read_csv("../risk_measurement_mturk/scaleup_v3/Batch_3970777_batch_results.csv") %>%
mutate(Answer.surveycode = as.numeric(Answer.surveycode))
mturk
## Read in mt
mturk <- read_csv("../risk_measurement_mturk/scaleup_v3/Batch_3970777_batch_results.csv") %>%
mutate(Answer.surveycode = as.numeric(Answer.surveycode))
mturk
mturk %>% filter(Answer.surveycode == 11811)
library(tidyverse)
## Read in qualtrics
qualtrics <- read_csv("../risk_measurement_mturk/scaleup_v3/Risk Measurement pilot_March 27, 2020_22.23.csv")
## Read in mt
mturk <- read_csv("../risk_measurement_mturk/scaleup_v3/Batch_3970777_batch_results.csv") %>%
mutate(Answer.surveycode = as.numeric(Answer.surveycode))
## Replace "drop" with reject message
## Create Approve column
qualtrics.accept.reject <- qualtrics %>%
mutate(mturkcode = as.numeric(mturkcode)) %>%
filter(!is.na(mturkcode)) %>%
select(mturkcode, Reject = reject) %>%
mutate(Reject = case_when(
Reject == "drop" ~ "Responses appeared to be generated by a bot",
TRUE ~ ""
)) %>%
mutate(Approve = case_when(
Reject == "" ~ "x",
TRUE ~ ""
))
## Read in mturk batch results to put in approve reject. Then match on the qualtrics approve/reject results.
mturk.approve.reject <- mturk %>%
select(-Approve, -Reject) %>%
inner_join(qualtrics.accept.reject, by = c("Answer.surveycode" = "mturkcode"))
write_csv(mturk.approve.reject, "../risk_measurement_mturk/scaleup_v3/mturk_approval_v3.csv")
## double-check rejected cases
mturk.approve.reject %>%
filter(Approve == "") %>%
select(Answer.surveycode)
mturk.approve.reject
Answer.surveycode
mturk %>%
filter(!Answer.surveycode %in% mturk.approve.reject$Answer.surveycode)
mturk %>%
filter(!Answer.surveycode %in% mturk.approve.reject$Answer.surveycode) %>%
select(Answer.surveycode)
mturk %>%
filter(Answer.surveycode == 84331)
qualtrics.accept.reject %>%
filter(mturkcode == 84331)
View(qualtrics)
qualtrics.accept.reject %>%
filter(mturkcode == 84331)
## Read in qualtrics
qualtrics <- read_csv("../risk_measurement_mturk/scaleup_v3/Risk Measurement pilot_March 27, 2020_22.23.csv")
qualtrics
library(tidyverse)
## Read in qualtrics
qualtrics <- read_csv("../risk_measurement_mturk/scaleup_v3/Risk Measurement pilot_March 27, 2020_22.23.csv")
## Read in mt
mturk <- read_csv("../risk_measurement_mturk/scaleup_v3/Batch_3970777_batch_results.csv") %>%
mutate(Answer.surveycode = as.numeric(Answer.surveycode))
## Replace "drop" with reject message
## Create Approve column
qualtrics.accept.reject <- qualtrics %>%
mutate(mturkcode = as.numeric(mturkcode)) %>%
filter(!is.na(mturkcode)) %>%
select(mturkcode, Reject = reject) %>%
mutate(Reject = case_when(
Reject == "drop" ~ "Responses appeared to be generated by a bot",
TRUE ~ ""
)) %>%
mutate(Approve = case_when(
Reject == "" ~ "x",
TRUE ~ ""
))
## Read in mturk batch results to put in approve reject. Then match on the qualtrics approve/reject results.
mturk.approve.reject <- mturk %>%
select(-Approve, -Reject) %>%
inner_join(qualtrics.accept.reject, by = c("Answer.surveycode" = "mturkcode"))
write_csv(mturk.approve.reject, "../risk_measurement_mturk/scaleup_v3/mturk_approval_v3.csv")
## double-check rejected cases
mturk.approve.reject %>%
filter(Approve == "") %>%
select(Answer.surveycode)
mturk %>%
filter(!Answer.surveycode %in% mturk.approve.reject$Answer.surveycode) %>%
select(Answer.surveycode)
qualtrics.accept.reject %>%
filter(mturkcode == 84331)
write_csv(mturk.approve.reject, "../risk_measurement_mturk/scaleup_v3/mturk_approval_v3.csv")
mturk.approve.reject
## Replace "drop" with reject message
## Create Approve column
qualtrics.accept.reject <- qualtrics %>%
mutate(mturkcode = as.numeric(mturkcode)) %>%
filter(!is.na(mturkcode)) %>%
select(mturkcode, Reject = reject) %>%
mutate(Reject = case_when(
Reject == "drop" ~ "Responses appeared to be generated by a bot",
TRUE ~ ""
)) %>%
mutate(Approve = case_when(
Reject == "" ~ "x",
TRUE ~ ""
))
## Read in mturk batch results to put in approve reject. Then match on the qualtrics approve/reject results.
mturk.approve.reject <- mturk %>%
select(-Approve, -Reject) %>%
inner_join(qualtrics.accept.reject, by = c("Answer.surveycode" = "mturkcode"))
write_csv(mturk.approve.reject, "../risk_measurement_mturk/scaleup_v3/mturk_approval_v3.csv")
## double-check rejected cases
mturk.approve.reject %>%
filter(Approve == "") %>%
select(Answer.surveycode)
mturk.approve.reject
mturk %>%
filter(!Answer.surveycode %in% mturk.approve.reject$Answer.surveycode) %>%
select(Answer.surveycode)
qualtrics.accept.reject %>%
filter(mturkcode == 84331)
library(tidyverse)
## Read in qualtrics
qualtrics <- read_csv("../risk_measurement_mturk/scaleup_v3/Risk Measurement pilot_March 27, 2020_22.23.csv")
## Read in mt
mturk <- read_csv("../risk_measurement_mturk/scaleup_v3/Batch_3970777_batch_results.csv") %>%
mutate(Answer.surveycode = as.numeric(Answer.surveycode))
## Read in mt
mturk <- read_csv("../risk_measurement_mturk/scaleup_v3/Batch_3970777_batch_results.xls") %>%
mutate(Answer.surveycode = as.numeric(Answer.surveycode))
## Read in qualtrics
qualtrics <- read_csv("../risk_measurement_mturk/scaleup_v3/Risk Measurement pilot_March 27, 2020_22.23.xls")
## Read in qualtrics
qualtrics <- read_csv("../risk_measurement_mturk/scaleup_v3/Risk Measurement pilot_March 27, 2020_22.23.csv")
## Read in mt
mturk <- read_csv("../risk_measurement_mturk/scaleup_v3/Batch_3970777_batch_results.csv") %>%
mutate(Answer.surveycode = as.numeric(Answer.surveycode))
## Read in qualtrics
qualtrics <- read_csv("../risk_measurement_mturk/scaleup_v3/Risk Measurement pilot_March 27, 2020_22.23.csv")
## Read in mt
mturk <- read_csv("../risk_measurement_mturk/scaleup_v3/Batch_3970777_batch_results.csv") %>%
mutate(Answer.surveycode = as.numeric(Answer.surveycode))
## Replace "drop" with reject message
## Create Approve column
qualtrics.accept.reject <- qualtrics %>%
mutate(mturkcode = as.numeric(mturkcode)) %>%
filter(!is.na(mturkcode)) %>%
select(mturkcode, Reject = reject) %>%
mutate(Reject = case_when(
Reject == "drop" ~ "Responses appeared to be generated by a bot",
TRUE ~ ""
)) %>%
mutate(Approve = case_when(
Reject == "" ~ "x",
TRUE ~ ""
))
## Read in mturk batch results to put in approve reject. Then match on the qualtrics approve/reject results.
mturk.approve.reject <- mturk %>%
select(-Approve, -Reject) %>%
inner_join(qualtrics.accept.reject, by = c("Answer.surveycode" = "mturkcode"))
write_csv(mturk.approve.reject, "../risk_measurement_mturk/scaleup_v3/mturk_approval_v3.csv")
## double-check rejected cases
mturk.approve.reject %>%
filter(Approve == "") %>%
select(Answer.surveycode)
mturk %>%
filter(!Answer.surveycode %in% mturk.approve.reject$Answer.surveycode) %>%
select(Answer.surveycode)
qualtrics.accept.reject %>%
filter(mturkcode == 84331)
qualtrics.accept.reject %>%
filter(mturkcode == 84331)
mturk %>%
filter(!Answer.surveycode %in% mturk.approve.reject$Answer.surveycode) %>%
select(Answer.surveycode)
## Replace "drop" with reject message
## Create Approve column
qualtrics.accept.reject <- qualtrics %>%
mutate(mturkcode = as.numeric(mturkcode)) %>%
filter(!is.na(mturkcode)) %>%
select(mturkcode, Reject = reject) %>%
mutate(Reject = case_when(
Reject == "drop" ~ "Responses appeared to be generated by a bot",
TRUE ~ ""
)) %>%
mutate(Approve = case_when(
Reject == "" ~ "x",
TRUE ~ ""
))
## Read in mturk batch results to put in approve reject. Then match on the qualtrics approve/reject results.
mturk.approve.reject <- mturk %>%
select(-Approve, -Reject) %>%
inner_join(qualtrics.accept.reject, by = c("Answer.surveycode" = "mturkcode"))
write_csv(mturk.approve.reject, "../risk_measurement_mturk/scaleup_v3/mturk_approval_v3.csv")
## double-check rejected cases
mturk.approve.reject %>%
filter(Approve == "") %>%
select(Answer.surveycode)
rm(list=ls())
